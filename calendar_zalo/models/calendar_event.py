from odoo import models, fields, api
from datetime import timedelta
import requests
import logging
from odoo.exceptions import UserError

_logger = logging.getLogger(__name__)
_LOG_API_ZALO = {
    "0": "G·ª≠i th√†nh c√¥ng",
    "-100": "X·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh, vui l√≤ng th·ª≠ l·∫°i sau",
    "-101": "·ª®ng d·ª•ng kh√¥ng h·ª£p l·ªá",
    "-102": "·ª®ng d·ª•ng kh√¥ng t·ªìn t·∫°i",
    "-103": "·ª®ng d·ª•ng ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t",
    "-104": "Secret key c·ªßa ·ª©ng d·ª•ng kh√¥ng h·ª£p l·ªá",
    "-105": "·ª®ng d·ª•ng g·ª≠i ZNS ch∆∞a ƒë∆∞∆°c li√™n k·∫øt v·ªõi OA n√†o",
    "-106": "Ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£",
    "-107": "ID th√¥ng b√°o kh√¥ng h·ª£p l·ªá",
    "-108": "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá",
    "-109": "ID m·∫´u ZNS kh√¥ng h·ª£p l·ªá",
    "-110": "Phi√™n b·∫£n Zalo app kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ng∆∞·ªùi d√πng c·∫ßn c·∫≠p nh·∫≠t phi√™n b·∫£n m·ªõi nh·∫•t",
    "-111": "M·∫´u ZNS kh√¥ng c√≥ d·ªØ li·ªáu",
    "-112": "N·ªôi dung m·∫´u ZNS kh√¥ng h·ª£p l·ªá",
    "-1123": "Kh√¥ng th·ªÉ t·∫°o QR code, vui l√≤ng ki·ªÉm tra l·∫°i",
    "-113": "Button kh√¥ng h·ª£p l·ªá",
    "-114": "Ng∆∞·ªùi d√πng kh√¥ng nh·∫≠n ƒë∆∞·ª£c ZNS v√¨ c√°c l√Ω do: Tr·∫°ng th√°i t√†i kho·∫£n, T√πy ch·ªçn nh·∫≠n ZNS, S·ª≠ d·ª•ng Zalo phi√™n b·∫£n c≈©, ho·∫∑c c√°c l·ªói n·ªôi b·ªô kh√°c",
    "-115": "T√†i kho·∫£n ZNS kh√¥ng ƒë·ªß s·ªë d∆∞",
    "-116": "N·ªôi dung kh√¥ng h·ª£p l·ªá",
    "-117": "OA ho·∫∑c ·ª©ng d·ª•ng g·ª≠i ZNS ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng m·∫´u ZNS n√†y",
    "-118": "T√†i kho·∫£n Zalo kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu ho√°",
    "-119": "T√†i kho·∫£n kh√¥ng th·ªÉ nh·∫≠n ZNS",
    "-120": "OA ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y",
    "-121": "M·∫´u ZNS kh√¥ng c√≥ n·ªôi dung",
    "-122": "Body request kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON",
    "-123": "Gi·∫£i m√£ n·ªôi dung th√¥ng b√°o RSA th·∫•t b·∫°i",
    "-124": "M√£ truy c·∫≠p kh√¥ng h·ª£p l·ªá",
    "-125": "ID Official Account kh√¥ng h·ª£p l·ªá",
    "-126": "V√≠ (development mode) kh√¥ng ƒë·ªß s·ªë d∆∞",
    "-127": "Template test ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c g·ª≠i cho qu·∫£n tr·ªã vi√™n",
    "-128": "M√£ encoding key kh√¥ng t·ªìn t·∫°i",
    "-129": "Kh√¥ng th·ªÉ t·∫°o RSA key, vui l√≤ng th·ª≠ l·∫°i sau",
    "-130": "N·ªôi dung m·∫´u ZNS v∆∞·ª£t qu√° gi·ªõi h·∫°n k√≠ t·ª±",
    "-131": "M·∫´u ZNS ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát",
    "-132": "Tham s·ªë kh√¥ng h·ª£p l·ªá",
    "-133": "M·∫´u ZNS n√†y kh√¥ng ƒë∆∞·ª£c ph√©p g·ª≠i v√†o ban ƒë√™m (t·ª´ 22h-6h)",
    "-134": "Ng∆∞·ªùi d√πng ch∆∞a ph·∫£n h·ªìi g·ª£i √Ω nh·∫≠n ZNS t·ª´ OA",
    "-135": "OA ch∆∞a c√≥ quy·ªÅn g·ª≠i ZNS (ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c, ƒëang s·ª≠ d·ª•ng g√≥i mi·ªÖn ph√≠)",
    "-136": "C·∫ßn k·∫øt n·ªëi v·ªõi ZCA ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y",
    "-137": "Thanh to√°n ZCA th·∫•t b·∫°i (v√≠ kh√¥ng ƒë·ªß s·ªë d∆∞,‚Ä¶)",
    "-138": "·ª®ng d·ª•ng g·ª≠i ZNS ch∆∞a c√≥ quy·ªÅn s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y",
    "-139": "Ng∆∞·ªùi d√πng t·ª´ ch·ªëi nh·∫≠n lo·∫°i ZNS n√†y",
    "-140": "OA ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn g·ª≠i ZNS h·∫≠u m√£i cho ng∆∞·ªùi d√πng n√†y",
    "-141": "Ng∆∞·ªùi d√πng t·ª´ ch·ªëi nh·∫≠n ZNS t·ª´ Official Account",
    "-142": "RSA key kh√¥ng t·ªìn t·∫°i, vui l√≤ng g·ªçi API t·∫°o RSA key",
    "-143": "RSA key ƒë√£ t·ªìn t·∫°i, vui l√≤ng g·ªçi API l·∫•y RSA key",
    "-144": "OA ƒë√£ v∆∞·ª£t gi·ªõi h·∫°n g·ª≠i ZNS trong ng√†y",
    "-145": "OA kh√¥ng ƒë∆∞·ª£c ph√©p g·ª≠i lo·∫°i n·ªôi dung ZNS n√†y",
    "-146": "M·∫´u ZNS n√†y ƒë√£ b·ªã v√¥ hi·ªáu h√≥a do ch·∫•t l∆∞·ª£ng g·ª≠i th·∫•p",
    "-147": "M·∫´u ZNS ƒë√£ v∆∞·ª£t gi·ªõi h·∫°n g·ª≠i trong ng√†y",
    "-148": "Kh√¥ng t√¨m th·∫•y ZNS journey token",
    "-149": "ZNS journey token kh√¥ng h·ª£p l·ªá",
    "-150": "ZNS journey token ƒë√£ h·∫øt h·∫°n",
    "-151": "Kh√¥ng ph·∫£i m·∫´u ZNS E2EE",
    "-200": "G·ª≠i tin nh·∫Øn th·∫•t b·∫°i",
    "-201": "Tham s·ªë kh√¥ng h·ª£p l·ªá",
    "-204": "Official Account ƒë√£ b·ªã x√≥a",
    "-205": "Official Account kh√¥ng t·ªìn t·∫°i",
    "-209": "API n√†y kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ do ·ª©ng d·ª•ng ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t",
    "-210": "Tham s·ªë v∆∞·ª£t qu√° gi·ªõi h·∫°n cho ph√©p",
    "-211": "V∆∞·ª£t qu√° quota s·ª≠ d·ª•ng cho ph√©p c·ªßa t√≠nh nƒÉng",
    "-212": "Official Account ch∆∞a ƒëƒÉng k√Ω API n√†y",
    "-213": "Ng∆∞·ªùi d√πng ch∆∞a quan t√¢m Official Account",
    "-214": "B√†i vi·∫øt ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω",
    "-216": "Access token kh√¥ng h·ª£p l·ªá",
    "-217": "Ng∆∞·ªùi d√πng ƒë√£ ch·∫∑n tin m·ªùi quan t√¢m",
    "-218": "ƒê√£ qu√° gi·ªõi h·∫°n g·ª≠i ƒë·∫øn ng∆∞·ªùi d√πng n√†y",
    "-219": "·ª®ng d·ª•ng ƒë√£ b·ªã g·ª° b·ªè ho·∫∑c v√¥ hi·ªáu h√≥a",
    "-220": "access_token ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng c√≤n kh·∫£ d·ª•ng",
    "-221": "T√†i kho·∫£n Official Account ch∆∞a x√°c th·ª±c",
    "-223": "OA ƒë√£ v∆∞·ª£t h·∫°n m·ª©c xu·∫•t b·∫£n N·ªôi dung cho ph√©p trong k·ª≥",
    "-224": "Official Account ch∆∞a mua g√≥i d·ªãch v·ª• ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y",
    "-227": "T√†i kho·∫£n ng∆∞·ªùi d√πng ƒë√£ b·ªã kh√≥a ho·∫∑c kh√¥ng online h∆°n 45 ng√†y. OA hi·ªán kh√¥ng th·ªÉ t∆∞∆°ng t√°c ƒë·∫øn ng∆∞·ªùi d√πng n√†y",
    "-230": "Ng∆∞·ªùi d√πng kh√¥ng t∆∞∆°ng t√°c v·ªõi OA trong 7 ng√†y qua",
    "-232": "Ng∆∞·ªùi d√πng ch∆∞a ph√°t sinh t∆∞∆°ng t√°c ho·∫∑c t∆∞∆°ng t√°c cu·ªëi ƒë√£ qu√° h·∫°n. OA hi·ªán kh√¥ng th·ªÉ t∆∞∆°ng t√°c ƒë·∫øn ng∆∞·ªùi d√πng n√†y",
    "-233": "Lo·∫°i tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c kh√¥ng kh·∫£ d·ª•ng",
    "-234": "Lo·∫°i tin nh·∫Øn n√†y kh√¥ng ƒë∆∞·ª£c ph√©p g·ª≠i v√†o bu·ªïi t·ªëi (t·ª´ 22 gi·ªù - 6 gi·ªù s√°ng h√¥m sau)",
    "-235": "API n√†y kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ cho ph√¢n lo·∫°i OA c·ªßa b·∫°n",
    "-237": "Nh√≥m chat GMF ƒë√£ h·∫øt h·∫°n",
    "-238": "asset_id ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ho·∫∑c kh√¥ng c√≤n kh·∫£ d·ª•ng",
    "-240": "API g·ª≠i tin nh·∫Øn V2 ƒë√£ kh√¥ng c√≤n ho·∫°t ƒë·ªông, vui l√≤ng chuy·ªÉn qua API g·ª≠i tin nh·∫Øn V3",
    "-241": "asset_id mi·ªÖn ph√≠ (c√≥ s·∫µn trong G√≥i d·ªãch v·ª•) ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
    "-242": "appsecret_proof cung c·∫•p trong tham s·ªë API kh√¥ng h·ª£p l·ªá",
    "-244": "Ng∆∞·ªùi d√πng ƒë√£ h·∫°n ch·∫ø nh·∫≠n lo·∫°i tin nh·∫Øn n√†y t·ª´ OA c·ªßa b·∫°n",
    "-248": "Vi ph·∫°m ti√™u chu·∫©n n·ªÅn t·∫£ng.",
    "-320": "·ª®ng d·ª•ng c·ªßa b·∫°n c·∫ßn k·∫øt n·ªëi v·ªõi Zalo Cloud Account ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng tr·∫£ ph√≠",
    "-321": "Zalo Cloud Account li√™n k·∫øt v·ªõi App ƒë√£ h·∫øt ti·ªÅn ho·∫∑c kh√¥ng th·ªÉ th·ª±c hi·ªán tr·∫£ ph√≠",
    "-403": "Kh√¥ng th·ªÉ t∆∞∆°ng t√°c v·ªõi nh√≥m chat v√¨ nh√≥m n√†y kh√¥ng ƒë∆∞·ª£c s·ªü h·ªØu b·ªüi OA",
    "-1340": "Kh√¥ng t√¨m th·∫•y Form	",
    "-1341": "OA kh√¥ng c√≥ quy·ªÅn truy c·∫≠p form n√†y",

}

class CalendarEvent(models.Model):
    _inherit = 'calendar.event'

    zalo_file_id = fields.Many2one('zalo.file', string='T·ªáp Zalo')
    zalo_image_id = fields.Many2one('zalo.image', string='·∫¢nh Zalo')
    image_preview = fields.Binary(string='·∫¢nh Zalo Xem tr∆∞·ªõc', compute='_compute_image_preview')
    modify = fields.Boolean(string='S·ª≠a ƒë·ªïi', default=False)
    sent = fields.Boolean(string='ƒê√£ g·ª≠i', default=False)

    @api.depends('zalo_image_id')
    def _compute_image_preview(self):
        for rec in self:
            rec.image_preview = rec.zalo_image_id.local_file if rec.zalo_image_id else False

    @api.model_create_multi
    def create(self, vals):
        event = super().create(vals)
        event._create_zalo_crons()
        return event

    def write(self, vals):
        # C·ªù t·∫°m ƒë·ªÉ tr√°nh ƒë·ªá quy
        avoid_recursion = self.env.context.get('avoid_modify_recursion', False)

        res = super().write(vals)

        if avoid_recursion:
            return res

        for record in self:
            other_fields = set(vals.keys()) - {'sent'}

            if other_fields and record.sent is True:
                # G·ªçi write nh∆∞ng truy·ªÅn context tr√°nh recursion
                record.with_context(avoid_modify_recursion=True).write({'modify': True})

            if other_fields:
                record._create_zalo_crons()

        return res

    def _compute_alarm_cron_time(self, event_start, duration, interval):
        """T√≠nh to√°n th·ªùi ƒëi·ªÉm c·∫ßn ch·∫°y cron d·ª±a tr√™n start - duration"""
        delta = {
            'minutes': timedelta(minutes=duration),
            'hours': timedelta(hours=duration),
            'days': timedelta(days=duration)
        }.get(interval, timedelta(minutes=0))
        return event_start - delta

    def _create_zalo_crons(self):
        """T·∫°o ho·∫∑c c·∫≠p nh·∫≠t cron job n·∫øu alarm_type l√† 'zalo'"""

        cron_model = self.env['ir.cron']
        model = self.env['ir.model']._get('calendar.event')

        for event in self:
            zalo_alarms = event.alarm_ids.filtered(lambda a: a.alarm_type == 'zalo')

            for alarm in zalo_alarms:
                alarm_time = self._compute_alarm_cron_time(
                    event.start,
                    alarm.duration,
                    alarm.interval
                )

                # Truy·ªÅn alarm.id v√†o code g·ªçi
                code_str = f"model.action_push_zalo({event.id}, {alarm.id}) or None"

                # T√¨m cron hi·ªán t·∫°i (n·∫øu c√≥) theo event v√† alarm id
                existing_cron = cron_model.search([
                    ('model_id', '=', model.id),
                    ('code', '=', code_str)
                ], limit=1)

                if existing_cron:
                    # C·∫≠p nh·∫≠t th·ªùi gian n·∫øu c·∫ßn
                    existing_cron.write({
                        'nextcall': alarm_time,
                        'active': True,
                    })
                    _logger.info("üõ†Ô∏è C·∫≠p nh·∫≠t cron ID %s cho event ID %s, alarm ID %s", existing_cron.id, event.id,
                                 alarm.id)
                else:
                    # T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
                    cron_model.create({
                        'name': f"Zalo Reminder for Event {event.id} - Alarm {alarm.id}",
                        'model_id': model.id,
                        'state': 'code',
                        'code': code_str,
                        'interval_number': 1,
                        'interval_type': 'months',
                        'nextcall': alarm_time,
                        'active': True,
                        'priority': 1,
                    })
                    _logger.info("‚úÖ T·∫°o m·ªõi cron cho event ID %s, alarm ID %s", event.id, alarm.id)

    def action_push_zalo(self, event_id, alarm_id=None):
        """G·ª≠i th√¥ng b√°o Zalo t·ª´ c√°c alarm c√≥ alarm_type='zalo' v√† ƒë√°nh d·∫•u cron c·∫ßn x√≥a"""

        event = self.sudo().browse(event_id)
        if not event.exists():
            raise UserError("S·ª± ki·ªán kh√¥ng t·ªìn t·∫°i.")

        if alarm_id:
            zalo_alarms = event.alarm_ids.filtered(lambda a: a.alarm_type == 'zalo' and a.id == alarm_id)
        else:
            zalo_alarms = event.alarm_ids.filtered(lambda a: a.alarm_type == 'zalo')

        if not zalo_alarms:
            _logger.info("Kh√¥ng c√≥ alarm Zalo cho s·ª± ki·ªán ID %s", event.id)
            return

        zalo_users = self._get_zalo_user_ids(event)
        user_ids = [u['id_zalo'] for u in zalo_users]
        name_users = [u['name'] for u in zalo_users]

        if not user_ids:
            _logger.warning("Kh√¥ng c√≥ Zalo user_id trong attendee cho s·ª± ki·ªán ID %s", event.id)
            return

        success = True

        for alarm in zalo_alarms:
            access_token = alarm.zalo_id.access_token
            if not access_token:
                _logger.warning("Alarm ID %s kh√¥ng c√≥ access_token.", alarm.id)
                success = False
                continue

            for user_id, name_user in zip(user_ids, name_users):
                result = self._send_zalo_template_message(event, user_id, access_token, alarm.id, name_user)
                if not result:
                    success = False

            # ‚úÖ ƒê√°nh d·∫•u c·∫ßn x√≥a cron, KH√îNG x√≥a ho·∫∑c t·∫Øt cron t·∫°i ƒë√¢y
            model = self.env['ir.model']._get('calendar.event')
            code_str = f"model.action_push_zalo({event.id}, {alarm.id}) or None"
            name_str = f"Zalo Reminder for Event {event.id} - Alarm {alarm.id}"

            cron = self.env['ir.cron'].search([
                ('model_id', '=', model.id),
                ('code', '=', code_str),
                ('name', '=', name_str),
            ], limit=1)

            if cron:
                self.env['calendar.event.cron.cleanup'].sudo().create({
                    'cron_name': name_str,
                    'cron_id': cron.id,
                    'event_id': event.id,
                    'alarm_id': alarm.id,
                    'state': 'pending'
                })

        if success:
            _logger.info("‚úÖ G·ª≠i th√†nh c√¥ng cho t·∫•t c·∫£ user, c·∫≠p nh·∫≠t sent=True")
            fresh_event = self.env['calendar.event'].sudo().browse(event.id)
            if fresh_event.exists():
                fresh_event.write({'sent': True})
            else:
                _logger.warning("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t sent=True v√¨ event kh√¥ng c√≤n t·ªìn t·∫°i")

    def cleanup_zalo_crons(self):
        """X√≥a c√°c cron Zalo ƒë√£ ƒë√°nh d·∫•u l√† pending"""
        cleanup_model = self.env['calendar.event.cron.cleanup']
        pending = cleanup_model.search([('state', '=', 'pending')])
        for rec in pending:
            try:
                if rec.cron_id and rec.cron_id.exists():
                    rec.cron_id.unlink()
                    rec.write({'state': 'done'})
                    _logger.info("üßπ ƒê√£ x√≥a cron: %s", rec.cron_name)
                else:
                    rec.write({'state': 'done'})
            except Exception as e:
                rec.write({'state': 'failed', 'error_message': str(e)})
                _logger.error("‚ùå L·ªói khi x√≥a cron: %s - %s", rec.cron_name, e)

    def _get_zalo_user_ids(self, event):
        """L·∫•y danh s√°ch user Zalo t·ª´ attendee, g·ªìm c·∫£ id_zalo v√† t√™n"""
        return [
            {'id_zalo': partner.id_zalo, 'name': partner.name}
            for partner in event.attendee_ids.mapped('partner_id')
            if partner.id_zalo
        ]

    def _send_zalo_template_message(self, event, user_id, access_token, alarm_id, name_user):
        """G·ª≠i tin nh·∫Øn template s·ª± ki·ªán Zalo"""
        from datetime import timedelta
        elements = []
        # N·∫øu c√≥ ·∫£nh, th√™m ·∫£nh v√†o ƒë·∫ßu message
        if event.zalo_image_id:
            elements.append({
                "attachment_id": event.zalo_image_id.image_url,
                "type": "banner"
            })
        # N·ªôi dung ch√≠nh
        elements += [
            {
                "type": "header",
                "content": f"Nh·∫Øc s·ª± ki·ªán: {event.name}" + (" (s·ª≠a ƒë·ªïi)" if event.modify else ""),
                "align": "left"
            },
            {
                "type": "table",
                "content": [
                    {"key": "M√£ Cu·ªôc H·ªçp", "value": str(event.id)},
                    {"key": "ƒê·ªìng ch√≠", "value": name_user or "Kh√¥ng r√µ"},
                    {"key": "Th·ªùi gian b·∫Øt ƒë·∫ßu",
                     "value": (event.start + timedelta(hours=7)).strftime('%H:%M %d-%m-%Y')},
                    {"key": "ƒê·ªãa ƒëi·ªÉm", "value": event.location or ""},
                    {"key": "T√≥m t·∫Øt n·ªôi dung", "value": event.description or ""},
                ]
            },
            {
                "type": "text",
                "align": "center",
                "content": "üì¢ Vui l√≤ng c√≥ m·∫∑t ƒë√∫ng gi·ªù!"
            }
        ]

        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
        event_url = f"{base_url}/web#id={event.id}&model=calendar.event&view_type=form"
        url_controller = f"{base_url}/zalo/send_file?event_id={event.id}&user_id={user_id}&alarm_id={alarm_id}"

        payload = {
            "recipient": {"user_id": user_id},
            "message": {
                "attachment": {
                    "type": "template",
                    "payload": {
                        "template_type": "transaction_booking",
                        "language": "VI",
                        "elements": elements,
                        # "buttons": [
                        #     {
                        #         "title": "Chi ti·∫øt s·ª± ki·ªán",
                        #         "type": "oa.open.url",
                        #         "payload": {"url": event_url}
                        #     }
                        # ]
                    }
                }
            }
        }

        if event.zalo_file_id:
            payload["message"]["attachment"]["payload"]["buttons"].append({
                "title": "L·∫•y t·ªáp ƒë√≠nh k√®m",
                "type": "oa.open.url",
                "payload": {"url": url_controller}
            })

        try:
            import requests
            response = requests.post(
                url="https://openapi.zalo.me/v3.0/oa/message/transaction",
                headers={
                    "access_token": access_token,
                    "Content-Type": "application/json"
                },
                json=payload,
                timeout=10
            )
            res_json = response.json()
            self._log_zalo_result(event, user_id, res_json.get("error"), zalo_type="template")
            if res_json.get("error") != 0:
                _logger.warning("Zalo API l·ªói khi g·ª≠i template cho user_id %s: %s", user_id, res_json)
                return False
            else:
                _logger.info("ƒê√£ g·ª≠i template Zalo th√†nh c√¥ng cho user_id %s", user_id)
                return True
        except requests.exceptions.RequestException as e:
            _logger.error("L·ªói k·∫øt n·ªëi khi g·ª≠i template Zalo ƒë·∫øn user_id %s: %s", user_id, str(e))
            return False

    def _send_zalo_file_if_available(self, event, user_id, access_token):
        """G·ª≠i t·ªáp tin n·∫øu event c√≥ zalo_file_id"""

        if not event.zalo_file_id or not event.zalo_file_id.file_token:
            return

        payload = {
            "recipient": {
                "user_id": user_id
            },
            "message": {
                "attachment": {
                    "type": "file",
                    "payload": {
                        "token": event.zalo_file_id.file_token
                    }
                }
            }
        }

        try:
            response = requests.post(
                url="https://openapi.zalo.me/v3.0/oa/message/cs",
                headers={
                    "access_token": access_token,
                    "Content-Type": "application/json"
                },
                json=payload,
                timeout=10
            )
            res_json = response.json()
            self._log_zalo_result(event, user_id, res_json.get("error"), zalo_type="file")

            if res_json.get("error") != 0:
                _logger.warning("G·ª≠i file Zalo th·∫•t b·∫°i cho user_id %s: %s", user_id, res_json)
            else:
                _logger.info("G·ª≠i file Zalo th√†nh c√¥ng cho user_id %s", user_id)
        except requests.exceptions.RequestException as e:
            _logger.error("L·ªói g·ª≠i file Zalo user_id %s: %s", user_id, str(e))


    def _log_zalo_result(self, event, user_id, error_code, zalo_type):
        """Ghi log k·∫øt qu·∫£ g·ª≠i Zalo v√†o b·∫£ng zalo.log"""
        message = _LOG_API_ZALO.get(str(error_code), "Kh√¥ng r√µ l·ªói")

        self.env['zalo.log'].create({
            'messenger': message,
            'user_id': user_id,
            'error_code': str(error_code),
            'event_id': event.id,
            'zalo_type': zalo_type
        })

    def unlink(self):
        cron_model = self.env['ir.cron']
        model = self.env['ir.model']._get('calendar.event')

        for event in self:
            if event.sent:
                zalo_alarms = event.alarm_ids.filtered(lambda a: a.alarm_type == 'zalo')
                if not zalo_alarms:
                    _logger.info(f"S·ª± ki·ªán ID {event.id} kh√¥ng c√≥ alarm zalo, b·ªè qua g·ª≠i th√¥ng b√°o h·ªßy.")
                else:
                    zalo_users = self._get_zalo_user_ids(event)
                    user_ids = [u['id_zalo'] for u in zalo_users]
                    name_users = [u['name'] for u in zalo_users]

                    if not user_ids:
                        _logger.warning(f"Kh√¥ng c√≥ Zalo user_id trong attendee cho s·ª± ki·ªán ID {event.id}")
                    else:
                        for alarm in zalo_alarms:
                            access_token = alarm.zalo_id.access_token
                            if not access_token:
                                _logger.warning(f"Alarm ID {alarm.id} kh√¥ng c√≥ access_token.")
                                continue

                            for user_id, name_user in zip(user_ids, name_users):
                                success = self._send_zalo_template_message_cancel(event, user_id, access_token,
                                                                                  name_user)
                                if success:
                                    _logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o h·ªßy s·ª± ki·ªán ID {event.id} ƒë·∫øn user_id {user_id}")
                                else:
                                    _logger.warning(
                                        f"L·ªói khi g·ª≠i th√¥ng b√°o h·ªßy s·ª± ki·ªán ID {event.id} ƒë·∫øn user_id {user_id}")
            else:
                # Xo√° cron n·∫øu ch∆∞a g·ª≠i
                zalo_alarms = event.alarm_ids.filtered(lambda a: a.alarm_type == 'zalo')
                for alarm in zalo_alarms:
                    code_str = f"model.action_push_zalo({event.id}, {alarm.id}) or None"
                    existing_cron = cron_model.search([
                        ('model_id', '=', model.id),
                        ('code', '=', code_str)
                    ])
                    if existing_cron:
                        _logger.info(f"üóëÔ∏è Xo√° {len(existing_cron)} cron c·ªßa s·ª± ki·ªán ID {event.id}, alarm ID {alarm.id}")
                        existing_cron.unlink()

        return super().unlink()

    def _send_zalo_template_message_cancel(self, event, user_id, access_token, name_user):
        """G·ª≠i tin nh·∫Øn template th√¥ng b√°o h·ªßy s·ª± ki·ªán khi event s·∫Øp b·ªã x√≥a"""
        elements = [
            {
                "type": "header",
                "content": f"H·ªßy s·ª± ki·ªán: {event.name}",
                "align": "left"
            },
            {
                "type": "table",
                "content": [
                    {"key": "M√£ Cu·ªôc H·ªçp", "value": str(event.id)},
                    {"key": "Ng∆∞·ªùi nh·∫≠n", "value": name_user or "Kh√¥ng r√µ"},
                    {"key": "Th√¥ng b√°o", "value": "S·ª± ki·ªán ƒë√£ b·ªã h·ªßy"},
                ]
            }
        ]

        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')

        payload = {
            "recipient": {"user_id": user_id},
            "message": {
                "attachment": {
                    "type": "template",
                    "payload": {
                        "template_type": "transaction_booking",
                        "language": "VI",
                        "elements": elements,
                    }
                }
            }
        }

        import requests
        try:
            response = requests.post(
                url="https://openapi.zalo.me/v3.0/oa/message/transaction",
                headers={
                    "access_token": access_token,
                    "Content-Type": "application/json"
                },
                json=payload,
                timeout=10
            )
            res_json = response.json()
            if res_json.get("error") != 0:
                _logger.warning("Zalo API l·ªói khi g·ª≠i template h·ªßy cho user_id %s: %s", user_id, res_json)
                return False
            else:
                return True
        except requests.exceptions.RequestException as e:
            _logger.error("L·ªói k·∫øt n·ªëi khi g·ª≠i template h·ªßy Zalo ƒë·∫øn user_id %s: %s", user_id, str(e))
            return False





